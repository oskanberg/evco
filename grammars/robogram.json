{
    "literal_int": [
        "<nz_digit><literal_int>", 
        "<digit>"
    ], 
    "digit": [
        "0", 
        "1", 
        "2", 
        "3", 
        "4", 
        "5", 
        "6", 
        "7", 
        "8", 
        "9"
    ], 
    "literal_boolean": [
        "true", 
        "false"
    ], 
    "statements": [
        "<statement> <statements>", 
        "<statement>"
    ], 
    "int": [
        "<literal_int>", 
        "getNumRounds()", 
        "getNumSentries()", 
        "getOthers()", 
        "Math.round(<double>)"
    ], 
    "double": [
        "<literal_double>", 
        "(double) <int>",
        "getX()", 
        "getY()", 
        "getVelocity()", 
        "getHeight()", 
        "getHeading()", 
        "getEnergy()", 
        "getGunHeading()", 
        "getGunCoolingRate()", 
        "getBattleFieldHeight()", 
        "getBattleFieldWidth()", 
        "getGunHeat()", 
        "getRadarHeading()", 
        "getTime()", 
        "(b != null ? b.<bop> : <double>)",
        "(r != null ? r.<rop> : <double>)",
        "(w != null ? w.<wop> : <double>)",
        "(e != null ? e.<eop> : <double>)"
    ], 
    "eop" : [
        "getBearing()",
        "getDistance()",
        "getEnergy()",
        "getVelocity()"
    ],
    "bop" : [
        "getBearing()",
        "getHeading()",
        "getPower()",
        "getVelocity()"
    ],
    "rop" : [
        "getBearing()",
        "getEnergy()"
    ],
    "wop" : [
        "getBearing()"
    ],
    "numeric": [
        "<double>", 
        "<int>"
    ], 
    "nz_digit": [
        "1", 
        "2", 
        "3", 
        "4", 
        "5", 
        "6", 
        "7", 
        "8", 
        "9"
    ], 
    "literal_double": [
        "<literal_int>.<fractional>"
    ], 
    "bool": [
        "<literal_boolean>", 
        "<expression_boolean>"
    ], 
    "expression_boolean": [
        "<expression_boolean_term>",
        "(r != null ? r.isMyFault() : <bool>)"
    ], 
    "statement": [
        "if (<expression_boolean>) {\n
        <action>;\n
      }\n
      else {\n
        <action>;\n
      }", 
        "<action>;"
    ], 
    "fractional": [
        "<digit>", 
        "<digit><digit>"
    ], 
    "action": [
    	"<action>;<action>",
        "setAhead(<double>)", 
        "setBack(<double>)", 
        "setTurnRight(<double>)", 
        "setTurnLeft(<double>)", 
        "setTurnGunLeft(<double>)", 
        "setTurnGunRight(<double>)", 
        "setTurnRadarLeft(<double>)", 
        "setTurnRadarLeft(<double>)", 
        "setAdjustGunForRobotTurn(<bool>)", 
        "setAdjustRadarForRobotTurn(<bool>)", 
        "setAdjustRadarForGunTurn(<bool>)", 
        "fire(<double>)"
    ], 
    "main": [
"   package sample.evolved;\n
    import robocode.*;\n
    public class ##name## extends AdvancedRobot{\n
    public void run() {\n
		while (true) {\n
			<statements>\n
			execute();\n
		}\n
	}\n

    private HitByBulletEvent b = null;\n
	public void onHitByBullet(HitByBulletEvent b) {\n
        <statements>\n
    }\n
    private HitRobotEvent r = null;\n
	public void onHitRobot(HitRobotEvent r) {\n
        <statements>\n
    }\n
    private HitWallEvent w = null;\n
	public void onHitWall(HitWallEvent w) {\n
        <statements>\n
    }\n
    private ScannedRobotEvent e = null;\n
    public void onScannedRobot(ScannedRobotEvent e) {\n
        <statements>\n
    }\n
}"
    ], 
    "expression_boolean_term": [
        "<numeric> == <numeric>", 
        "<numeric> != <numeric>", 
        "<numeric> > <numeric>", 
        "<numeric> >= <numeric>", 
        "<numeric> < <numeric>", 
        "<numeric> <= <numeric>"
    ]
}